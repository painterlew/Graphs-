Script started on Sat 04 Feb 2017 11:47:57 PM PST
chang15@uw1-320-11:~$ valgrind ./a.outg++ -std=c++11 lab3.cpp graphl.cpp graphm.cpp nodedata.cpp [A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Kp
chang15@uw1-320-11:~$ g++ -std=c++11 lab3.cpp graphl.cpp graphm.cpp nodedata.cpp [A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cvalgrind ./a.out[K
[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C
==21069== Memcheck, a memory error detector
==21069== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==21069== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==21069== Command: ./a.out
==21069== 
Graph:
Node 1       Aurora and 85th
  dege 1 2
  dege 1 3
  dege 1 5
Node 2       Green Lake Starbucks
  dege 2 4
Node 3       Woodland Park Zoo
  dege 3 2
  dege 3 4
Node 4       Troll under bridge
Node 5       PCC
  dege 5 2
  dege 5 4

Depthh-fist ordering: 1 2 4 3 5Graph:
Node 1       aaa
  dege 1 3
  dege 1 2
Node 2       bbb
  dege 2 3
Node 3       ccc
  dege 3 2

Depthh-fist ordering: 1 3 2Description           From node   To node     Dijkstra's        Path
Aurora and 85th
                        1           2          40               1 3 2 
                        1           3          20               1 3 
                        1           4          50               1 3 2 4 
                        1           5          30               1 5 
Green Lake Starbucks
                        2           1         ---
                        2           3         ---
                        2           4          10               2 4 
                        2           5         ---
Woodland Park Zoo
                        3           1         ---
                        3           2          20               3 2 
                        3           4          30               3 2 4 
                        3           5         ---
Troll under bridge
                        4           1         ---
                        4           2         ---
                        4           3         ---
                        4           5         ---
PCC
                        5           1         ---
                        5           2          20               5 2 
                        5           3         ---
                        5           4          25               5 4 
    3           1         ---
Description           From node   To node     Dijkstra's        Path
aaa
                        1           2           9               1 3 2 
                        1           3           5               1 3 
bbb
                        2           1         ---
                        2           3          20               2 3 
ccc
                        3           1         ---
                        3           2           4               3 2 
    3           1         ---

==21069== 
==21069== HEAP SUMMARY:
==21069==     in use at exit: 72,704 bytes in 1 blocks
==21069==   total heap usage: 154 allocs, 153 frees, 124,362 bytes allocated
==21069== 
==21069== LEAK SUMMARY:
==21069==    definitely lost: 0 bytes in 0 blocks
==21069==    indirectly lost: 0 bytes in 0 blocks
==21069==      possibly lost: 0 bytes in 0 blocks
==21069==    still reachable: 72,704 bytes in 1 blocks
==21069==         suppressed: 0 bytes in 0 blocks
==21069== Rerun with --leak-check=full to see details of leaked memory
==21069== 
==21069== For counts of detected and suppressed errors, rerun with: -v
==21069== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
chang15@uw1-320-11:~$ exit

Script done on Sat 04 Feb 2017 11:48:13 PM PST
